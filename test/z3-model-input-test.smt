(declare-datatype Cell ((cell (x Int) (y Int))))
(declare-datatype Column ((column (upperleft Cell) (bottomright Cell))))
(define-fun isAColumn ((c Column)) Bool (or (and (= (x (upperleft c)) 1) (and (= (y (upperleft c)) 1) (and (= (x (bottomright c)) 1) (= (y (bottomright c)) 5)))) (and (= (x (upperleft c)) 2) (and (= (y (upperleft c)) 1) (and (= (x (bottomright c)) 2) (= (y (bottomright c)) 4))))))
(define-fun inUsedRange ((c Cell)) Bool (and (>= (x c) 1) (and (>= (x c) 2) (and (>= (y c) 1) (>= (y c) 5)))))
(define-fun isAFormula ((c Cell)) Bool (or (and (= (x c) 2) (= (y c) 4)) (and (= (x c) 1) (= (y c) 5))))
(define-fun isANumber ((c Cell)) Bool (or (and (= (x c) 1) (= (y c) 1)) (or (and (= (x c) 2) (= (y c) 1)) (or (and (= (x c) 1) (= (y c) 2)) (or (and (= (x c) 2) (= (y c) 2)) (or (and (= (x c) 1) (= (y c) 3)) (or (and (= (x c) 2) (= (y c) 3)) (or (and (= (x c) 1) (= (y c) 4)) (or (and (= (x c) 2) (= (y c) 4)) (and (= (x c) 1) (= (y c) 5)))))))))))
(define-fun numericValue ((c Cell)) Int (ite (and (= (x c) 1) (= (y c) 5)) 10 (ite (and (= (x c) 2) (= (y c) 4)) 6 (ite (and (= (x c) 1) (= (y c) 4)) 4 (ite (and (= (x c) 2) (= (y c) 3)) 3 (ite (and (= (x c) 1) (= (y c) 3)) 3 (ite (and (= (x c) 2) (= (y c) 2)) 2 (ite (and (= (x c) 1) (= (y c) 2)) 2 (ite (and (= (x c) 2) (= (y c) 1)) 1 1)))))))))
(define-fun fingerprintValue ((c Cell)) Int (ite (and (= (x c) 1) (= (y c) 5)) 10 6))
(define-fun ccabove ((c1 Cell) (c2 Cell)) Bool (and (= (y c1) (- (y c2) 1)) (= (x c1) (x c2))))
(define-fun ccbelow ((c1 Cell) (c2 Cell)) Bool (and (= (y c1) (+ (y c2) 1)) (= (x c1) (x c2))))
(define-fun ccright ((c1 Cell) (c2 Cell)) Bool (and (= (x c1) (+ (x c2) 1)) (= (y c1) (y c2))))
(define-fun ccleft ((c1 Cell) (c2 Cell)) Bool (and (= (x c1) (- (x c2) 1)) (= (y c1) (y c2))))
(define-fun ccadj ((c1 Cell) (c2 Cell)) Bool (or (ccabove c1 c2) (or (ccbelow c1 c2) (or (ccleft c1 c2) (ccright c1 c2)))))
(define-fun ccolabove ((col1 Column) (col2 Column)) Bool (and (= (x (upperleft col1)) (x (upperleft col2))) (and (= (x (bottomright col1)) (x (bottomright col2))) (> (y (bottomright col1)) (y (upperleft col2))))))
(define-fun ccolbelow ((col1 Column) (col2 Column)) Bool (and (= (x (upperleft col1)) (x (upperleft col2))) (and (= (x (bottomright col1)) (x (bottomright col2))) (< (y (upperleft col1)) (y (bottomright col2))))))
(define-fun ccolright ((col1 Column) (col2 Column)) Bool (and (= (y (upperleft col1)) (y (upperleft col2))) (and (= (y (bottomright col1)) (y (bottomright col2))) (> (x (upperleft col1)) (x (bottomright col2))))))
(define-fun ccolleft ((col1 Column) (col2 Column)) Bool (and (= (y (upperleft col1)) (y (upperleft col2))) (and (= (y (bottomright col1)) (y (bottomright col2))) (< (x (bottomright col1)) (x (upperleft col2))))))
(declare-const arg1 Column)
(assert (isAColumn arg1))
(declare-const arg2 Column)
(assert (isAColumn arg2))
(assert (ccolleft arg1 arg2))